---

- name: Get Cluster information
  kubernetes.core.k8s_cluster_info:
        invalidate_cache: False
  register: api_status

#- name: Creating Restore CRD to trigger restoring
#  kubernetes.core.k8s:
#    state: present
#    template:
#      - path: "restore-hub.yml"

#- name: Let's pause 20s to let restore running
#  wait_for:
#    timeout: 20

- name: Get managed clusters
  kubernetes.core.k8s_info:
    api_version: cluster.open-cluster-management.io/v1
    kind: ManagedCluster
  register: managedcluster_list

#TODO: double check only managedcluster with label key velero.io/restore-name
#TODO remove 'local-cluster' from mc_lists
- set_fact:
    mc_lists: "{{  managedcluster_list.resources | map(attribute='metadata.name') | list }}"


- name: retrieve  all AKS across all subcrtiptions
  shell: for subid in $(az account list --query [].id -o tsv); do az aks list --subscription $subid --query [].id -o tsv; done
  register: list_all_aks_x_accounts

- set_fact:
    aks_IDs: "{{ list_all_aks_x_accounts.stdout }}"

- name: deconnect AKS
  include_tasks: ../roles/connect-aks-to-acm-hub-collection/tasks/delete.yml
  vars:
     AKS_NAME:  "{{ aks_id.split('/')[8] }}"
     AKS_MRG: "{{ aks_id.split('/')[4] }}"
     AKS_SUB: "{{ aks_id.split('/')[2] }}"
  loop: "{{ aks_IDs.splitlines() }}"
  loop_control:
    loop_var: aks_id
  when: ( aks_id.split('/')[8] in {{ mc_lists }} )

- name: Let's pause 20s to let private dns zone fade away
  wait_for:
    timeout: 20

- name: reconnect AKS
  include_tasks: ../roles/connect-aks-to-acm-hub-collection/tasks/create.yml
  vars:
     AKS_NAME:  "{{ aks_id.split('/')[8] }}"
     AKS_MRG: "{{ aks_id.split('/')[4] }}"
     AKS_SUB: "{{ aks_id.split('/')[2] }}"
  loop: "{{ aks_IDs.splitlines() }}"
  loop_control:
    loop_var: aks_id
  when: ( aks_id.split('/')[8] in {{ mc_lists }} )

- name: Let's pause 20s to let private endpoint/linksvc connect correctly
  wait_for:
    timeout: 20

- name: re-import AKS
  include_tasks: ../roles/import-managedcluster-default-invoke/tasks/create.yml
  vars:
     AKS_NAME:  "{{ aks_id.split('/')[8] }}"
     AKS_MRG: "{{ aks_id.split('/')[4] }}"
     AKS_SUB: "{{ aks_id.split('/')[2] }}"
  loop: "{{ aks_IDs.splitlines() }}"
  loop_control:
    loop_var: aks_id
  when: ( aks_id.split('/')[8] in {{ mc_lists }} )
